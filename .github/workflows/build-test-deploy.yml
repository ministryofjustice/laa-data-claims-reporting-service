name: Deploy with Helm

on:
  workflow_dispatch:
  pull_request:
  push:
    branches:
      - main

# Only allow one run of this workflow, per branch, at a time
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5

      - name: Set up JDK 21
        uses: actions/setup-java@v5
        with:
          java-version: 21
          distribution: 'corretto'

      - name: Set up Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Build and test
        run: ./gradlew build
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Test coverage verification
        run: ./gradlew jacocoTestCoverageVerification

#        Add run of integration tests when these are added to the repo

      - name: Upload service JAR artifact
        uses: actions/upload-artifact@v4
        with:
          name: service-jar
          path: /opt/laa-spring-boot-microservice/app.jar
          retention-days: 1

#      Add checkstyle report, test report, jacoco coverage if needed
#      Add snyk scan of app
#      Add snyk scan of docker

  build-push-docker:
    name: build and push docker image
    runs-on: ubuntu-latest
    needs:
      - build-test
    permissions:
      id-token: write
      contents: read
    steps:

      - uses: actions/checkout@v5

      - name: Download JAR artifact
        uses: actions/download-artifact@v5
        with:
          name: service-jar
          path: claims-data/service/build/libs/

        # ---------- AWS auth (OIDC) ----------
      - name: Configure AWS creds
        uses: aws-actions/configure-aws-credentials@v4.3.1
        with:
          role-to-assume: ${{ secrets.ECR_ROLE_TO_ASSUME }}
          aws-region: ${{  vars.ECR_REGION }}

      - name: Login to ECR
        uses: aws-actions/amazon-ecr-login@v2
        id: login-ecr
      - name: Build and push a Docker image for claims-reporting
        run: |
          docker build --no-cache -t $REGISTRY/$REPOSITORY:$IMAGE_TAG ./claims-reporting
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: ${{ vars.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}

    deploy-uat:
      runs-on: ubuntu-latest
      needs:
        - build-push-docker
#        - vulnerability-scan-app
#        - vulnerability-scan-docker
      environment: uat
      permissions:
        id-token: write
        contents: read

      steps:
        - name: Checkout
          uses: actions/checkout@v5

        - name: Deploy UAT branch
          id: deploy_uat_branch
          uses: ./.github/actions/deploy_branch
          with:
            ecr-region: ${{ vars.ECR_REGION }}
            ecr-role-to-assume: ${{ secrets.ECR_ROLE_TO_ASSUME }}
            ecr-repository: ${{ vars.ECR_REPOSITORY }}
            kube-cert: ${{ secrets.KUBE_CERT }}
            kube-token: ${{ secrets.KUBE_TOKEN }}
            kube-cluster: ${{ secrets.KUBE_CLUSTER }}
            kube-namespace: ${{ secrets.KUBE_NAMESPACE }}
            app-environment: uat



