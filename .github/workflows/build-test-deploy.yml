name: Deploy with Helm

on:
  workflow_dispatch:
  pull_request:
  push:
    branches:
      - main

# Only allow one run of this workflow, per branch, at a time
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5

      - name: Set up JDK 21
        uses: actions/setup-java@v5
        with:
          java-version: 21
          distribution: 'corretto'

      - name: Set up Gradle
        uses: gradle/actions/setup-gradle@v5

      - name: Build and test
        run: ./gradlew build
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Test coverage verification
        run: ./gradlew jacocoTestCoverageVerification

#        Add run of integration tests when these are added to the repo

      - name: Upload service JAR artifact
        uses: actions/upload-artifact@v4
        with:
          name: service-jar
          path: laa-data-claims-reporting-service/build/libs/*.jar
          retention-days: 1

      - name: Upload checkstyle report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: checkstyle-report
          path: laa-data-claims-reporting-service/build/reports/checkstyle
          retention-days: 14

      - name: Upload test report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-report
          path: laa-data-claims-reporting-service/build/reports/tests
          retention-days: 14

      - name: Upload jacoco coverage report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: jacoco-coverage-report
          path: laa-data-claims-reporting-service/build/reports/jacoco
          retention-days: 14

#      Add checkstyle report, test report, jacoco coverage if needed
  vulnerability-scan-app:
    runs-on: ubuntu-latest
    needs:
      - build-test
    env:
      SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      SNYK_TEST_EXCLUDE: build,generated
      SNYK_TARGET_REFERENCE: main
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v5

      - name: Run Snyk to check app for vulnerabilities
        uses: snyk/actions/gradle@master
        with:
          command: code test
          args: --severity-threshold=high

  vulnerability-scan-docker:
    runs-on: ubuntu-latest
    needs:
      - build-test
    env:
      SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v5

      - name: Set up JDK 21
        uses: actions/setup-java@v5
        with:
          java-version: 21
          distribution: 'corretto'

      - name: Set up Gradle
        uses: gradle/actions/setup-gradle@v5

      - name: Build app jar with gradle
        run: ./gradlew build

      - name: Build a Docker image
        run: docker build -t spring-boot-microservice:scan .

      - name: Run Snyk to check Docker image for vulnerabilities
        uses: snyk/actions/docker@master
        with:
          image: spring-boot-microservice:scan
          args: --file=Dockerfile --severity-threshold=high

  build-push-docker:
    name: build and push docker image
    runs-on: ubuntu-latest
    needs:
      - build-test
      - vulnerability-scan-docker
    permissions:
      id-token: write
      contents: read
    steps:

      - uses: actions/checkout@v5

      - name: Download JAR artifact
        uses: actions/download-artifact@v5
        with:
          name: service-jar
          path: laa-data-claims-reporting-service/build/libs/

        # ---------- AWS auth (OIDC) ----------
      - name: Configure AWS creds
        uses: aws-actions/configure-aws-credentials@v5.1.0
        with:
          role-to-assume: ${{ secrets.ECR_ROLE_TO_ASSUME }}
          aws-region: ${{  vars.ECR_REGION }}

      - name: Login to ECR
        uses: aws-actions/amazon-ecr-login@v2
        id: login-ecr
      - name: Build and push a Docker image for claims-reporting
        run: |
          DOCKER_BUILDKIT=0 docker build --no-cache -t $REGISTRY/$REPOSITORY:$IMAGE_TAG ./
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: ${{ vars.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}

  deploy-uat:
    runs-on: ubuntu-latest
    needs:
      - build-push-docker
      - vulnerability-scan-app
      - vulnerability-scan-docker
    environment: uat
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Deploy UAT branch
        id: deploy_uat_branch
        uses: ./.github/deploy_branch
        with:
          ecr-region: ${{ vars.ECR_REGION }}
          ecr-role-to-assume: ${{ secrets.ECR_ROLE_TO_ASSUME }}
          ecr-repository: ${{ vars.ECR_REPOSITORY }}
          kube-cert: ${{ secrets.KUBE_CERT }}
          kube-token: ${{ secrets.KUBE_TOKEN }}
          kube-cluster: ${{ secrets.KUBE_CLUSTER }}
          kube-namespace: ${{ secrets.KUBE_NAMESPACE }}
          app-environment: uat

  deploy-staging:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs:
      - build-push-docker
      - vulnerability-scan-app
      - vulnerability-scan-docker
    environment: staging
    permissions:
      id-token: write
      contents: read

    steps:

      - name: Checkout
        uses: actions/checkout@v5

      - name: Deploy staging
        id: deploy_staging
        uses: ./.github/deploy
        with:
          ecr-region: ${{ vars.ECR_REGION }}
          ecr-role-to-assume: ${{ secrets.ECR_ROLE_TO_ASSUME }}
          ecr-repository: ${{ vars.ECR_REPOSITORY }}
          kube-cert: ${{ secrets.KUBE_CERT }}
          kube-token: ${{ secrets.KUBE_TOKEN }}
          kube-cluster: ${{ secrets.KUBE_CLUSTER }}
          kube-namespace: ${{ secrets.KUBE_NAMESPACE }}
          app-environment: staging

  deploy-production:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: deploy-staging
    environment: production
    permissions:
      id-token: write
      contents: read

    steps:

      - name: Checkout
        uses: actions/checkout@v5

      - name: Deploy production
        id: deploy_production
        uses: ./.github/deploy
        with:
          ecr-region: ${{ vars.ECR_REGION }}
          ecr-role-to-assume: ${{ secrets.ECR_ROLE_TO_ASSUME }}
          ecr-repository: ${{ vars.ECR_REPOSITORY }}
          kube-cert: ${{ secrets.KUBE_CERT }}
          kube-token: ${{ secrets.KUBE_TOKEN }}
          kube-cluster: ${{ secrets.KUBE_CLUSTER }}
          kube-namespace: ${{ secrets.KUBE_NAMESPACE }}
          app-environment: production
